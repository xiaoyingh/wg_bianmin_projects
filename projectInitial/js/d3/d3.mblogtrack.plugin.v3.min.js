function MblogTrackChart(a, b, c, d) {
    this.container = $("#" + a),
    this.dataFile = b,
    this.width = c,
    this.callback = d,
    this.tree = null,
    this.diagonal = null,
    this.svg = null,
    this.nodes = null,
    this.links = null,
    this.node = null,
    this.link = null,
    this.rate = 1.2,
    this.pos = {
        x: 0,
        y: c / 4
    },
    this.dragFlag = null,
    this.dragX = null,
    this.dragY = null,
    this.isFirstLoad = !0,
    this.cutTitleLen = 10,
    this.cutContentLen = 50,
    this.showTitleFlag = !1,
    this.maxRtt = null,
    this.minRtt = null,
    this.maxFans = null,
    this.minFans = null
}
MblogTrackChart.prototype.init = function() {
    var a = this;
    return a.container.css("cursor", "url(images/openhand.cur) 8 8, move"),
    a.container.get(0).onmousewheel = function(b) {
        var c = 0;
        b.wheelDelta ? c = b.wheelDelta: b.detail && (c = b.detail);
        var d = {
            w: a.container.width(),
            h: a.container.height()
        },
        e = {
            left: a.container.scrollLeft(),
            top: a.container.scrollTop()
        };
        return c > 0 ? a.width < 5e3 && (a.width = a.width * a.rate, a.pos = {
            x: (e.left + d.w / 2) * a.rate - d.w / 2,
            y: (e.top + d.h / 2) * a.rate - d.h / 2
        }) : 0 > c && a.width > 500 && (a.width = a.width / a.rate, a.pos = {
            x: (e.left + d.w / 2) / a.rate - d.w / 2,
            y: (e.top + d.h / 2) / a.rate - d.h / 2
        }),
        a.updateChart(),
        !1
    },
    a.container.mousedown(function(b) {
        a.dragFlag = !0,
        a.dragX = b.clientX,
        a.dragY = b.clientY,
        a.container.css("cursor", "url(images/closedhand.cur) 8 8, move")
    }),
    a.container.mouseup(function() {
        a.dragFlag = !1,
        a.container.css("cursor", "url(images/openhand.cur) 8 8, move")
    }),
    a.container.mousemove(function(b) {
        a.dragFlag && (a.dragX && a.container.scrollLeft(a.container.scrollLeft() + a.dragX - b.clientX), a.dragY && a.container.scrollTop(a.container.scrollTop() + a.dragY - b.clientY), a.dragX = b.clientX, a.dragY = b.clientY)
    }),
    a.updateChart(),
    a
},
MblogTrackChart.prototype.updateChart = function() {
    var a = this;
    a.container.empty(),
    a.tree = d3.layout.tree().size([360, a.width / 2 - 120]).separation(function(a, b) {
        return (a.parent == b.parent ? 1 : 2) / a.depth
    }),
    a.diagonal = d3.svg.diagonal.radial().projection(function(a) {
        return [a.y, a.x / 180 * Math.PI]
    }),
    a.svg = d3.select("#" + a.container.get(0).id).append("svg").attr("width", a.width).attr("height", a.width).append("g").attr("transform", "translate(" + a.width / 2 + "," + a.width / 2 + ")"),
    d3.json(a.dataFile,
    function(b, c) {
        a.nodes = a.tree.nodes(c),
        a.links = a.tree.links(a.nodes),
        a.link = a.svg.selectAll(".link").data(a.links).enter().append("path").attr("class", "link").attr("style",
        function(b) {
            return a.compareRtt(b.source.rtt) && a.compareRtt(b.target.rtt) && a.compareFans(b.source.fans) && a.compareFans(b.target.fans) ? void 0 : "display:none;"
        }).attr("d", a.diagonal),
        a.node = a.svg.selectAll(".node").data(a.nodes).enter().append("g").attr("style",
        function(b) {
            return a.compareRtt(b.rtt) && a.compareFans(b.fans) ? "fill:#fff;": "display:none;"
        }).attr("class", "node tagtext").attr("title",
        function(a) {
            return a.name
        }).attr("content",
        function(a) {
            return a.content
        }).attr("ref",
        function(a) {
            return a.id
        }).attr("transform",
        function(a) {
            return "rotate(" + (a.x - 90) + ")translate(" + a.y + ")"
        }),
        a.node.append("circle").attr("r", 3.5).attr("style",
        function(a) {
            return null == a.color || "" == a.color ? "": "fill:" + a.color + ";stroke:" + a.color
        }),
        a.node.append("text").attr("dy", ".31em").attr("text-anchor",
        function(a) {
            return a.x < 180 ? "start": "end"
        }).attr("transform",
        function(a) {
            return a.x < 180 ? "translate(8)": "rotate(180)translate(-8)"
        }).text(function(b) {
            return "1" == b.show || 1 == a.showTitleFlag ? b.name: ""
        }),
        $("div[qtip]").remove(),
        $("g.node").each(function(b, c) {
            var d = $(c).attr("content");
            d || (d = $(c).attr("title")),
            d && $(c).qtip({
                content: d.substring(0, a.cutContentLen),
                position: {
                    corner: {
                        target: "topRight",
                        tooltip: "bottomLeft"
                    }
                },
                style: {
                    padding: 5,
                    background: "#A2D959",
                    color: "black",
                    textAlign: "center",
                    border: {
                        width: 7,
                        radius: 5,
                        color: "#A2D959"
                    },
                    tip: "bottomLeft",
                    name: "dark"
                }
            })
        }),
        a.isFirstLoad ? (a.container.scrollLeft((a.container.find("svg").width() - a.container.width()) / 2).scrollTop((a.container.find("svg").height() - a.container.height()) / 2), a.isFirstLoad = !1) : a.container.scrollLeft(a.pos.x).scrollTop(a.pos.y),
        a.pos = {
            x: a.container.scrollLeft(),
            y: a.container.scrollTop()
        },
        a.callback && a.callback(a.container)
    }),
    d3.select(self.frameElement).style("height", a.width - 500 + "px")
},
MblogTrackChart.prototype.showTitle = function(a) {
    this.showTitleFlag = a
},
MblogTrackChart.prototype.setMaxRtt = function(a) {
    this.maxRtt = null == a ? null: parseInt(a)
},
MblogTrackChart.prototype.setMinRtt = function(a) {
    this.minRtt = null == a ? null: parseInt(a)
},
MblogTrackChart.prototype.setMaxFans = function(a) {
    this.maxFans = null == a ? null: parseInt(a)
},
MblogTrackChart.prototype.setMinFans = function(a) {
    this.minFans = null == a ? null: parseInt(a)
},
MblogTrackChart.prototype.compareRtt = function(a) {
    var b = this,
    c = !0,
    d = parseInt(a);
    return c = void 0 != a ? null == b.maxRtt && null == b.minRtt ? !0 : null == b.maxRtt && b.minRtt <= d ? !0 : null == b.minRtt && b.maxRtt >= d ? !0 : null != b.maxRtt && null != b.minRtt && b.minRtt <= d && b.maxRtt >= d ? !0 : !1 : !0
},
MblogTrackChart.prototype.compareFans = function(a) {
    var b = this,
    c = !0,
    d = parseInt(a);
    return c = void 0 != a ? null == b.maxFans && null == b.minFans ? !0 : null == b.maxFans && b.minFans <= d ? !0 : null == b.minFans && b.maxFans >= d ? !0 : null != b.maxFans && null != b.minFans && b.minFans <= d && b.maxFans >= d ? !0 : !1 : !0
};